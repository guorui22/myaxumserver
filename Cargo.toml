[workspace]
resolver = "2" # resolver字段用于配置依赖项解析器的版本，这里使用2版本
members = [
    "letter-avatar",
    "libproto",
    "metaforge"
]

[workspace.dependencies]
# Axum Web框架依赖，multipart 处理文件上传
axum = { version = "0.7", features = [ "multipart"] } # 基于 tokio 的 Web 框架，multipart 特性用于处理文件上传
axum-macros = { version = "0.4", features = [] } # 可以使用#[debug_handler]标注获取更准确的错误提示
axum-extra = { version = "0.9", features = ["typed-header"] } # Axum Web框架扩展。启用 TypedHeader 提取器和响应
tokio = { version = "1", features = ["full"] } # Rust 异步运行时
# Tower HTTP 中间件依赖
tower = { version = "0.4", features = ["limit"] } # ConcurrencyLimitLayer 服务并发限制中间件支持
tower-http = { version = "0.5", features = ["full"] } # HTTP 中间件支持
# 序列化与反序列化依赖
serde = { version = "1.0", features = ["derive"] } # 序列化与反序列化
serde_json = { version = "1.0" }# JSON 序列化与反序列化
# UUID 依赖库，生成全局唯一请求ID
uuid = { version = "1.8", features = [] } # uuid依赖库
# 监听 Ctrl+C 退出应用
ctrlc = { version = "3.4" } # ctrl+c 退出应用
# 文本模板工具库
askama = { version = "0.12", features = [] }
# 日期时间处理
chrono = { version = "0.4" }   # for date and time
# 金额计算(sqlx-mysql v0.7.3 依赖于 bigdecimal v0.3.0)
bigdecimal = { version = "0.3", features = ["serde"] } # 处理货币金额
# proto 文件生成 Rust 接口依赖
libproto = { path = "./libproto" }
# grpc-server 服务器构建依赖
tonic = { version = "0.11" }
# 使用 tera 模板库制作 deno 运行时可用 JavaScript & TypeScript 代码脚本模版
tera = { version = "1" }
# 基于trait对象的错误类型，用于统一错误处理
anyhow = { version = "1.0" }
# 获取 CPU 内核数量
num_cpus = { version = "1.16" }
# 用于声明延迟计算的静态数据，通常用在需要全局状态管理或初始化成本较高的资源时
lazy_static = { version = "1.4" }
# 密码加密解密，用于密码明文生成哈希和校验
bcrypt = { version = "0.15" }
# JWT token 依赖库
jsonwebtoken = { version = "9.3" }
# 自定义错误类型
thiserror = { version = "1.0" }
# 定义 Protocol Buffers 中类型在 Rust 里的对应类型。常与与 prost 库一起使用。
prost-types = { version = "0.12" }
# 随机数生成器
rand = { version = "0.8" }
# AES 加密算法库
aes = { version = "0.8" }
# AES CTR 模式对称加密实现
ctr = { version = "0.9" }
# 配合 AES 加密使用的字节数组与十六进制字符串的快速转换工具
const-hex = { version = "1.12" }
# 日志管理依赖库
tracing = { version = "0.1" }  # 日志框架
tracing-appender = { version = "0.2" }  # 日志输出器
tracing-subscriber = { version = "0.3" } # 日志订阅器
# Sea ORM库依赖，必须启用 sqlx-mysql + runtime-tokio-native-tls 特性才能连接 MySQL 数据库
sea-orm = { version = "0.12", features = ["sqlx-mysql", "runtime-tokio-native-tls"] }
# 异步 SQL 工具包
sqlx = { version = "0.7", features = [ "runtime-tokio-native-tls" , "mysql", "bigdecimal" ] }
# Redis 数据库连接池
deadpool-redis = { version = "0.14", features = ["serde"] }
# SQL 解析，用于生成全生命周期的 SQL 语句
sqlparser = { version = "0.46" }
# 读取配置文件
config = { version = "0.14" }


[profile.release]
lto = true
strip = true
opt-level = "z"
codegen-units = 1