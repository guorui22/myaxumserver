[package]
name = "metaforge"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Axum Web框架依赖，multipart 处理文件上传
axum = { workspace = true } # 基于 tokio 的 Web 框架，multipart 特性用于处理文件上传
axum-macros = { workspace = true } # 可以使用#[debug_handler]标注获取更准确的错误提示
axum-extra = { workspace = true } # Axum Web框架扩展。启用 TypedHeader 提取器和响应
tokio = { workspace = true } # Rust 异步运行时
# Tower HTTP 中间件依赖
tower = { workspace = true } # ConcurrencyLimitLayer 服务并发限制中间件支持
tower-http = { workspace = true } # HTTP 中间件支持
# 序列化与反序列化依赖
serde = { workspace = true } # 序列化与反序列化
serde_json = { workspace = true }# JSON 序列化与反序列化
# UUID 依赖库，生成全局唯一请求ID
uuid = { workspace = true } # uuid依赖库
# 监听 Ctrl+C 退出应用
ctrlc = { workspace = true } # ctrl+c 退出应用
# 文本模板工具库
askama = { workspace = true }
# 日期时间处理
chrono = { workspace = true }   # for date and time
# 金额计算(sqlx-mysql v0.7.3 依赖于 bigdecimal v0.3.0)
bigdecimal = { workspace = true } # 处理货币金额
# grpc-server 服务器构建依赖
tonic = { workspace = true }
# 使用 tera 模板库制作 deno 运行时可用 JavaScript & TypeScript 代码脚本模版
tera = { workspace = true }
# 基于trait对象的错误类型，用于统一错误处理
anyhow = { workspace = true }
# 获取 CPU 内核数量
num_cpus = { workspace = true }
# 用于声明延迟计算的静态数据，通常用在需要全局状态管理或初始化成本较高的资源时
lazy_static = { workspace = true }
# 密码加密解密，用于密码明文生成哈希和校验
bcrypt = { workspace = true }
# JWT token 依赖库
jsonwebtoken = { workspace = true }
# 自定义错误类型
thiserror = { workspace = true }
# 定义 Protocol Buffers 中类型在 Rust 里的对应类型。常与与 prost 库一起使用。
prost-types = { workspace = true }
# 随机数生成器
rand = { workspace = true }
# AES 加密算法库
aes = { workspace = true }
# AES CTR 模式对称加密实现
ctr = { workspace = true }
# 配合 AES 加密使用的字节数组与十六进制字符串的快速转换工具
const-hex = { workspace = true }
# 日志管理依赖库
tracing = { workspace = true }  # 日志框架
tracing-appender = { workspace = true }  # 日志输出器
tracing-subscriber = { workspace = true } # 日志订阅器
# Sea ORM库依赖，必须启用 sqlx-mysql + runtime-tokio-native-tls 特性才能连接 MySQL 数据库
sea-orm = { workspace = true }
# 异步 SQL 工具包
sqlx = { workspace = true }
# Redis 数据库连接池
deadpool-redis = { workspace = true }
# SQL 解析，用于生成全生命周期的 SQL 语句
sqlparser = { workspace = true }
# 读取配置文件
config = { workspace = true }
# proto 文件生成 Rust 接口依赖的本地项目
libproto = { workspace = true }